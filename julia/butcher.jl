#!/usr/bin/env julia

module Butcher

include("precision.jl")

export butcher_dict, debug_table                # any other way to convert type besides map?

# butcher table layout:

#          |
#     c_i  |  A_ij
#     _____|_________
#       1  |  b_j                               # note: 1 in last row only used to verify sum_j b_j = 1


euler_1 = map(Precision, 
            [0 0; 
             1 1])        

heun_2 = map(Precision, 
            [0 0 0;
             1 1 0;
             1 1/2 1/2])

midpoint_2 = map(Precision,
            [0 0 0;
             1/2 1/2 0;
             1 0 1])

ralston_2 = map(Precision,
            [0 0 0;
             2/3 2/3 0;
             1 1/4 3/4])

heun_3 = map(Precision,
            [0 0 0 0;
             1/3 1/3 0 0;
             2/3 0 2/3 0;
             1 1/4 0 3/4])
            
ralston_3 = map(Precision,
            [0 0 0 0;
             1/2 1/2 0 0;
             3/4 0 3/4 0;
             1 2/9 1/3 4/9])

runge_kutta_3 = map(Precision,
            [0 0 0 0;
             1/2 1/2 0 0;
             1 -1 2 0;
             1 1/6 2/3 1/6])

ssp_shu_osher_3 = map(Precision,                # ssp = strong stability preserving
            [0 0 0 0;
             1 1 0 0;
             1/2 1/4 1/4 0;
             1 1/6 1/6 2/3])
            
ssp_spiteri_ruuth_3 = map(Precision,
            [0 0 0 0 0;
             1/2 1/2 0 0 0;
             1 1/2 1/2 0 0;
             1/2 1/6 1/6 1/6 0;
             1 1/6 1/6 1/6 1/2])

runge_kutta_4 = map(Precision,
            [0 0 0 0 0;
             1/2 1/2 0 0 0;
             1/2 0 1/2 0 0;
             1 0 0 1 0;
             1 1/6 1/3 1/3 1/6])
 
three_eights_rule_4 = map(Precision,
            [0 0 0 0 0;
             1/3 1/3 0 0 0;
             2/3 -1/3 1 0 0;
             1 1 -1 1 0;
             1 1/8 3/8 3/8 1/8])

ralston_4 = map(Precision,
            [0 0 0 0 0;
             0.4 0.4 0 0 0;
             0.4557372542187894 0.2969776092477536 0.15875964497103556 0 0;
             1 0.21810038822592054 -3.050965148692931 3.8328647604670123 0;
             1 0.1747602822626904 -0.551480662878733 1.2055355993965235 0.17118478121951902])

ssp_ketcheson_4 = map(Precision,
            [0 0 0 0 0 0 0 0 0 0 0;
             1/6 1/6 0 0 0 0 0 0 0 0 0;
             1/3 1/6 1/6 0 0 0 0 0 0 0 0;
             1/2 1/6 1/6 1/6 0 0 0 0 0 0 0;
             2/3 1/6 1/6 1/6 1/6 0 0 0 0 0 0;
             1/3 1/15 1/15 1/15 1/15 1/15 0 0 0 0 0;
             1/2 1/15 1/15 1/15 1/15 1/15 1/6 0 0 0 0;
             2/3 1/15 1/15 1/15 1/15 1/15 1/6 1/6 0 0 0;
             5/6 1/15 1/15 1/15 1/15 1/15 1/6 1/6 1/6 0 0;
             1 1/15 1/15 1/15 1/15 1/15 1/6 1/6 1/6 1/6 0;
             1 1/10 1/10 1/10 1/10 1/10 1/10 1/10 1/10 1/10 1/10])

fehlberg_4 = map(Precision,
            [0 0 0 0 0 0;
             1/4 1/4 0 0 0 0;
             3/8 3/32 9/32 0 0 0;
             12/13 1932/2197 -7200/2197 7296/2197 0 0;
             1 439/216 -8 3680/513 -845/4104 0;
             1 25/216 0 1408/2565 2197/4104 -1/5])

butcher_5 = map(Precision,
            [0 0 0 0 0 0 0;
             1/4 1/4 0 0 0 0 0;
             1/4 1/8 1/8 0 0 0 0;
             1/2 0 -1/2 1 0 0 0;
             3/4 3/16 0 0 9/16 0 0;
             1 -3/7 2/7 12/7 -12/7 8/7 0;
             1 7/90 0 32/90 12/90 32/90 7/90])

cash_karp_5 = map(Precision,
            [0 0 0 0 0 0 0;
             1/5 1/5 0 0 0 0 0;
             3/10 3/40 9/40 0 0 0 0;
             3/5 3/10 -9/10 6/5 0 0 0;
             1 -11/54 5/2 -70/27 35/27 0 0;
             7/8 1631/55296 175/512 575/13824 44275/110592 253/4096 0;
             1 37/378 0 250/621 125/594 0 512/1771])

dormand_prince_5 = map(Precision,
            [0 0 0 0 0 0 0;
             1/5 1/5 0 0 0 0 0;
             3/10 3/40 9/40 0 0 0 0;
             4/5 44/45 -56/15 32/9 0 0 0;
             8/9 19372/6561 -25360/2187 64448/6561 -212/729 0 0;
             1 9017/3168 -355/33 46732/5247 49/176 -5103/18656 0;
             1 35/384 0 500/1113 125/192 -2187/6784 11/84])

bogacki_shampine_5 = map(Precision,
            [0 0 0 0 0 0 0 0;
             1/6 1/6 0 0 0 0 0 0;
             2/9 2/27 4/27 0 0 0 0 0;
             3/7 183/1372 -162/343 1053/1372 0 0 0 0;
             2/3 68/297 -4/11 42/143 1960/3861 0 0 0;
             3/4 597/22528 81/352 63099/585728 58653/366080 4617/20480 0 0;
             1 174197/959244 -30942/79937 8152137/19744439 666106/1039181 -29421/29068 482048/414219 0;
             1 587/8064 0 4440339/15491840 24353/124800 387/44800 2152/5985 7267/94080])

tsitouras_5 = map(Precision,
            [0 0 0 0 0 0 0;
             0.161 0.161 0 0 0 0 0;
             0.327 -8.4806554923569887e-03 3.3548065549235700e-01 0 0 0 0;
             0.9 2.8971530571054935 -6.3594484899750752 4.3622954328695815 0 0 0;
             9.8002554090450966e-01 5.3258648284392569 -1.1748883564062828e+01 7.4955393428898365 -9.2495066361755252e-02 0 0;
             1 5.8614554429464203 -1.2920969317847110e+01 8.1593678985761589 -7.1584973281400996e-02 -2.8269050394068383e-02 0;
             1 9.6460766818065230e-02 0.01 4.7988965041449960e-01 1.3790085741037419 -3.2900695154360808 2.3247105240997739])

# from Verner 1978 paper
verner_5 = map(Precision,
            [0 0 0 0 0 0 0;
             1/18 1/18 0 0 0 0 0;
             1/6 -1/12 1/4 0 0 0 0;
             2/9 -2/81 4/27 8/81 0 0 0;
             2/3 40/33 -4/11 -56/11 54/11 0 0;
             1 -369/73 72/73 5380/219 -12285/584 2695/1752 0;
             1 3/80 0 4/25 243/1120 77/160 73/700])

butcher_6 = map(Precision,
            [0 0 0 0 0 0 0 0;
             1/2 1/2 0 0 0 0 0 0;
             2/3 2/9 4/9 0 0 0 0 0;
             1/3 7/36 2/9 -1/12 0 0 0 0;
             5/6 -35/144 -55/36 35/48 15/8 0 0 0;
             1/6 -1/360 -11/36 -1/8 1/2 1/10 0 0;
             1 -41/260 22/13 43/156 -118/39 32/195 80/39 0;
             1 13/200 0 11/40 11/40 4/25 4/25 13/200])

# Hairer 2nd edition (pg. 181)
verner_6 = map(Precision,
            [0 0 0 0 0 0 0 0 0;
             1/6 1/6 0 0 0 0 0 0 0;
             4/15 4/75 16/75 0 0 0 0 0 0;
             2/3 5/6 -8/3 5/2 0 0 0 0 0;
             5/6 -165/64 55/6 -425/64 85/96 0 0 0 0;
             1 12/5 -8 4015/612 -11/36 88/255 0 0 0;
             1/15 -8263/15000 124/75 -643/680 -81/250 2484/10625 0 0 0;
             1 3501/1720 -300/43 297275/52632 -319/2322 24068/84065 0 3850/26703 0;
             1 3/40 0 875/2244 23/72 264/1955 0 125/11592 43/616])
#--------------------------------------------------------------------------------------------------





butcher_dict = Dict("E1"     => ["euler_1",             euler_1],                   
                    "H2"     => ["heun_2",              heun_2],
                    "M2"     => ["midpoint_2",          midpoint_2],
                    "R2"     => ["ralston_2",           ralston_2],
                    "H3"     => ["heun_3",              heun_3],
                    "R3"     => ["ralston_3",           ralston_3],
                    "RK3"    => ["runge_kutta_3",       runge_kutta_3],
                    "SSPSO3" => ["ssp_shu_osher_3",     ssp_shu_osher_3],
                    "SSPSR3" => ["ssp_spiteri_ruuth_3", ssp_spiteri_ruuth_3],
                    "RK4"    => ["runge_kutta_4",       runge_kutta_4],
                    "TER4"   => ["three_eights_rule_4", three_eights_rule_4],
                    "R4"     => ["ralston_4",           ralston_4],
                    "SSPK4"  => ["ssp_ketcheson_4",     ssp_ketcheson_4],
                    "F4"     => ["fehlberg_4",          fehlberg_4],
                    "B5"     => ["butcher_5",           butcher_5],
                    "CK5"    => ["cash_karp_5",         cash_karp_5],
                    "DP5"    => ["dormand_prince_5",    dormand_prince_5],
                    "BS5"    => ["bogacki_shampine_5",  bogacki_shampine_5],
                    "T5"     => ["tsitouras_5",         tsitouras_5],
                    "V5"     => ["verner_5",            verner_5],
                    "B6"     => ["butcher_6",           butcher_6],
                    "V6"     => ["verner_6",            verner_6])   
                    
# I should keep dictionaries in categories and then combine them later

 
debug_table = 0

# should call a debug


end


# can I do an if __main__ script?           # try debugging table in a main script (can probably skip writing to file)